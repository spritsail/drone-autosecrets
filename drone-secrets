#!/bin/sh
set -e
set -o pipefail

# Only use error colours when stdout is a tty
if [ -t 2 ]; then
    RED='\033[0;31m'
    NC='\033[0m'
fi

error() { >&2 printf "${RED}${MSG:-Error}: $@${NC}"; exit 1; }

if [ $# -lt 1 ]; then
    MSG=Usage error "$(basename $0) <repo e.g. spritsail/test> [docker image repo]"
elif [ -z "$DRONE_SERVER" ]; then
    error "DRONE_SERVER variable is unset"
elif [ -z "$DRONE_TOKEN" ]; then
    error "DRONE_TOKEN variable is unset"
elif [ -z "$GITHUB_API_TOKEN" ]; then
    error "GITHUB_API_TOKEN variable is unset"
elif ! docker info >/dev/null 2>&1; then
    error "docker daemon isn't running"
fi

REPO="$1"
IMAGE="${2:-$1}"

# Get github repo details first
REPO_INFO="$(curl -fsSL --header "Authorization: token ${GITHUB_API_TOKEN}" "https://api.github.com/repos/$REPO")"
DESC="$(echo "$REPO_INFO" | jq -er .description)" || DESC="$REPO"

# Retrieve Docker Basic Authentication token:
CREDS_STORE="$(jq -r '.credsStore' "$HOME/.docker/config.json")"
[ "$CREDS_STORE" = null ] && \
    BASIC_AUTH="$(jq -r '.auths["https://index.docker.io/v1/"].auth' "$HOME/.docker/config.json")" || \
    BASIC_AUTH=$(echo https://index.docker.io/v1/ | docker-credential-"$CREDS_STORE" get | jq -j '"\(.Username):\(.Secret)"' | base64)

# Log in to DockerHub
DH_TOKEN="$(curl -fsSL https://hub.docker.com/v2/users/login/ \
        --header "Content-Type: application/json" \
        --data "$(jo \
            username="$(echo $BASIC_AUTH | base64 -d | cut -d: -f1)" \
            password="$(echo $BASIC_AUTH | base64 -d | cut -d: -f2)" \
        )" | jq -r .token
)"

# Test to see if the repo exists on DH
if ! curl -fsL "https://hub.docker.com/v2/repositories/$IMAGE" \
    --output /dev/null \
    --header "Authorization: JWT $DH_TOKEN"
then
    # Create the DH repo if not
    curl -fsSL "https://hub.docker.com/v2/repositories/$REPO/autobuild/" \
        --output /dev/null \
        --header "Authorization: JWT $DH_TOKEN" \
        --header "Content-Type: application/json" \
        --data "$(jo \
            name="${IMAGE#*/}" \
            namespace="${IMAGE#/*}" \
            description="$DESC" \
            dockerhub_repo_name="$IMAGE" \
            vcs_repo_name="$REPO" \
            provider=github \
            build_tags=$(jo -a $(jo name=latest source_type=Branch source_name=master dockerfile_location=/)) \
            active=false \
            is_private=false \
        )"
    echo "[*] docker-hub: created repo $IMAGE (linked to $REPO)"
fi

# Refresh remote repo list
drone repo sync >/dev/null && echo "[*] drone: updated repository list"

# Enable the drone repo if  we can
if drone repo add "$REPO" >/dev/null 2>&1; then
    echo "[*] drone: enabled repo '${REPO}'"
fi

drone repo update --trusted "$REPO" >/dev/null 2>&1 || true
echo "[*] drone: set repo to trusted"

{ gopass spritsail/drone.spritsail.io/env; echo; } | \
    while read secret; do
        name="$(echo ${secret%%:*} | xargs)"
        value="$(echo ${secret#*:} | xargs)"
        drone secret add --name="$name" --value="$value" "$REPO" ||
            drone secret update --name="$name" --value="$value" "$REPO"
    done

if [ "$NEWREPO" = "true" ]; then
    docker pull tianon/true
    docker tag tianon/true "$IMAGE"
    docker push "$REPO"
fi
